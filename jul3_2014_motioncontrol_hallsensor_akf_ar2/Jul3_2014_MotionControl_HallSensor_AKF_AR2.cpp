#include <iostream>
using namespace std;
#include <time.h>
#include <stdlib.h>

#include "CALCULATION.h"
#include "cmath"

int main()
{
	CALCULATION CALC;
	CALC.OutputParameter();

	srand((int)time(0));
	int THEO_or_REAL = THEO;
	//int THEO_or_REAL = REAL;


	//#############################################  //test inverse model
	//****** Force Calculation test (Debug); ******
	//#############################################
    //double PosTest_umOa[3] = {3.0, 4.0, 5.0},
    //       FdTest_pNOa[3]  = {6.0, 4.0, 5.0};
    ////**** Theo: ****
    //CALC.OptInvMdl_Curr_FromLS_KItheo (FdTest_pNOa, PosTest_umOa);
    //CALC.Calc_FNor_FromSixCurr_KItheo (PosTest_umOa);
    //double FXcalc_pN_Oa = CALC.FNor_Curr_KItheo[X]*CALC.FGain_x;
    //double FYcalc_pN_Oa = CALC.FNor_Curr_KItheo[Y]*CALC.FGain_y;
    //double FZcalc_pN_Oa = CALC.FNor_Curr_KItheo[Z]*CALC.FGain_z;
    ////**** Real: ****
    //CALC.OptInvMdl_Curr_FromLS_KIreal (FdTest_pNOa, PosTest_umOa);
    //CALC.Calc_FNor_FromSixCurr_KIreal (PosTest_umOa);
    //double FXcalc_pN_Oa = CALC.FNor_Curr_KIreal[X]*CALC.FGain_x;
    //double FYcalc_pN_Oa = CALC.FNor_Curr_KIreal[Y]*CALC.FGain_y;
    //double FZcalc_pN_Oa = CALC.FNor_Curr_KIreal[Z]*CALC.FGain_z;
	//##########################################
	//****** (end) Force Calculation test ******
	//##########################################

	//中文註解

	//####################################################################
	//****** Read Thermal Motion, Measurement Noise, Thermal Force: ******  //100k
	//####################################################################
	char fname_ThmMotionXYZ[200],
		 fname_MeasNoiseXYZ[200],
		 fname_ThmForceXYZ[200];
	sprintf(fname_ThmMotionXYZ, "Thermal Noise XYZ 1612SplRate (SI unit).txt");
	//************************************************************************//
	sprintf(fname_MeasNoiseXYZ, "Meas. Noise XYZ (SI unit).txt");
	//************************************************************************//
	sprintf(fname_ThmForceXYZ,  "Thermal Force all XYZ Water DampInc 10sec,10sec,10sec 100000SplRate (SI unit).txt");
	//sprintf(fname_ThmForceXYZ,  "Thermal Force all XYZ Water DampInc 10sec,10sec,10sec 1612SplRate (SI unit).txt");
	//sprintf(fname_ThmForceXYZ,  "Thermal Force all XYZ Gly DampInc 10sec,10sec,10sec 100000SplRate (SI unit).txt");
	//************************************************************************//
	CALC.Read_ThmMotion_XYZ(fname_ThmMotionXYZ);  //The White Gaussian Noise is generated by MATLAB
	CALC.Read_ThmForce_XYZ (fname_ThmForceXYZ);
    CALC.Read_MeasNoise_XYZ(fname_MeasNoiseXYZ);  //The White Gaussian Noise is generated by MATLAB
	//#########################################################################
	//****** (end) Read Thermal Motion, Measurement Noise, Thermal Force ******
	//#########################################################################


	//###############################
	//****** Positioning Only: ******
	//###############################
	////int NUM_Simu_Meas = 40000; //sample spot  �p��ɶ�

	////CALC.Trap_Target_umOm[X] = 0.0; //center
	////CALC.Trap_Target_umOm[Y] = 0.0;
	////CALC.Trap_Target_umOm[Z] = 0.0;

	////CALC.Positioning_Simu_Init( NUM_Simu_Meas );

	////CALC.Estimation_Init( WTR );  //water

	////Kp = 10.0;
	////CALC.Set_PIDgain( Kp,Kp,Kp,  0.0,0.0,0.0,  0.0,0.0,0.0 );
	////CALC.Calc_Ctrl_Coeff_Force();  //c2d �ݭn���D���Ѽ�

	////CALC.Positioning_Simu( THEO ); //Bias & Pole Strength Effect are included

	////char fname_TrapRst [200];

	////sprintf( fname_TrapRst,"Trapping Simu WTR at(%3.1f,%3.1f,%3.1f)um Pgain(%3.1f,%3.1f,%3.1f) (12-24-2015).txt",//�s��
	////	CALC.Trap_Target_umOm[X], CALC.Trap_Target_umOm[Y], CALC.Trap_Target_umOm[Z],
	////	CALC.Pgain[X], CALC.Pgain[Y], CALC.Pgain[Z],
	////	CALC.Igain[X], CALC.Igain[Y], CALC.Igain[Z],
	////	CALC.Dgain[X], CALC.Dgain[Y], CALC.Dgain[Z]);
	////CALC.Write_SimuRst_Target_Meas_Real_Curr_Force(fname_TrapRst);
	//####################################
	//****** (end) Positioning Only ******
	//####################################



	//############################
	//****** Tracking Only: ******
	//############################
	double deg = 0.0;
	//CALC.RampTracking_Init(70.0, 0.0, 0, 4, deg);  //xyz����
	CALC.RampTracking_Init(40.0, 0.0, 0, 200, deg);

	CALC.ThmF_Counter = 0;
	CALC.Index = 0;

	CALC.Set_PIDgain( 50,50,50,  200.0,200.0,200.0,  0.0,0.0,0.0 );
	CALC.Calc_Ctrl_Coeff_Force();

	CALC.Tracking_Simu( THEO ); //Bias & Pole Strength Effect are included

	char fname_TrapRst [300];
	sprintf( fname_TrapRst,"TRACKING Ramp (%2.1f degree) Simu WTR Pgain(%3.1f,%3.1f,%3.1f) Igain(%3.1f,%3.1f,%3.1f) Dgain(%3.1f,%3.1f,%3.1f) (9-21-2016).txt",
		deg,
		CALC.Pgain[X], CALC.Pgain[Y], CALC.Pgain[Z],
		CALC.Igain[X], CALC.Igain[Y], CALC.Igain[Z],
		CALC.Dgain[X], CALC.Dgain[Y], CALC.Dgain[Z]);
	CALC.Write_SimuRst_Target_Meas_Real_Curr_Force(fname_TrapRst);

	CALC.Simu_Finalize(); //delete pointers
	//#################################
	//****** (end) Tracking Only ******
	//#################################



	//################################################
    //****** Positioning & Const Kalman Filter: ****** //noise matrix���v�T
	//################################################
	/*CALC.Set_PIDgain( 30.0,30.0,30.0,  0.0,0.0,0.0,  0.0,0.0,0.0 );
	CALC.Calc_Ctrl_Coeff_Force();

	CALC.Trap_Target_umOm[X] = 0.0;
	CALC.Trap_Target_umOm[Y] = 0.0;
	CALC.Trap_Target_umOm[Z] = 0.0;

	int NUM_Simu_Meas = 48000;
	CALC.Positioning_Simu_Init( NUM_Simu_Meas );

	CALC.Estimation_Init( WTR );
	//CALC.Estimation_Init( GLY );

	CALC.Positioning_Simu_WithEsti( THEO, CONST_KF );

	char fname_TrapRst [200];
	sprintf( fname_TrapRst,"Trapping Simu WTR at(%3.1f,%3.1f,%3.1f)um with PID gain(%3.1f,%3.1f,%3.1f) (1-1-2014).txt",
		CALC.Trap_Target_umOm[X], CALC.Trap_Target_umOm[Y], CALC.Trap_Target_umOm[Z],
		CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z]);
	CALC.Write_SimuRst_Target_Meas_Real_Curr_Force(fname_TrapRst);
	//***********************/
	/*char fname_EstiRst_x[200], 
		 fname_EstiRst_y[200], 
		 fname_EstiRst_z[200];
	sprintf( fname_EstiRst_x, "CONST_KF AR2 Esti WTR WithFixFgain Rst X From C++ (InWater 1612Hz) PID gain(%3.1f,%3.1f,%3.1f) (1-1-2016).txt", CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z] );
	sprintf( fname_EstiRst_y, "CONST_KF AR2 Esti WTR WithFixFgain Rst Y From C++ (InWater 1612Hz) PID gain(%3.1f,%3.1f,%3.1f) (1-1-2016).txt", CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z] );
	sprintf( fname_EstiRst_z, "CONST_KF AR2 Esti WTR WithFixFgain Rst Z From C++ (InWater 1612Hz) PID gain(%3.1f,%3.1f,%3.1f) (1-1-2016).txt", CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z] );
	CALC.Write_EstiRst_xyz( fname_EstiRst_x, fname_EstiRst_y, fname_EstiRst_z );*/


	////char fname_TrapRst [200];
	////sprintf( fname_TrapRst,"Trapping Simu Gly at(%3.1f,%3.1f,%3.1f)um with PID gain(%3.1f,%3.1f,%3.1f) (1-1-2016).txt",
	////	CALC.Trap_Target_umOm[X], CALC.Trap_Target_umOm[Y], CALC.Trap_Target_umOm[Z],
	////	CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z]);
	////CALC.Write_SimuRst_Target_Meas_Real_Curr_Force(fname_TrapRst);
	//////***********************//
	////char fname_EstiRst_x[200], 
	////	 fname_EstiRst_y[200], 
	////	 fname_EstiRst_z[200];
	////sprintf( fname_EstiRst_x, "CONST_KF AR2 Esti Gly WithFixFgain Rst X From C++ (InGly 1612Hz) PID gain(%3.1f,%3.1f,%3.1f) (1-1-2016).txt", CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z] );
	////sprintf( fname_EstiRst_y, "CONST_KF AR2 Esti Gly WithFixFgain Rst Y From C++ (InGly 1612Hz) PID gain(%3.1f,%3.1f,%3.1f) (1-1-2016).txt", CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z] );
	////sprintf( fname_EstiRst_z, "CONST_KF AR2 Esti Gly WithFixFgain Rst Z From C++ (InGly 1612Hz) PID gain(%3.1f,%3.1f,%3.1f) (1-1-2016).txt", CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z] );
	////CALC.Write_EstiRst_xyz( fname_EstiRst_x, fname_EstiRst_y, fname_EstiRst_z );

	//#####################################################
    //****** (end) Positioning & Const Kalman Filter ******
	//#####################################################



	//#########################################
    //#### Tracking & Const Kalman Filter: ####
	//#########################################
	/*CALC.Set_PIDgain( 40.0,40.0,40.0,  0.0,0.0,0.0,  0.0,0.0,0.0 );
	//CALC.Set_PIDgain_Vhall(10.0, 100, 0.0);
	CALC.Calc_Ctrl_Coeff_Force();
	//CALC.Calc_Ctrl_Coeff_Vhall();

	//cout<<"Coeff_ErrVhall:  "<<CALC.Coeff_ErrVhall <<endl;
	//cout<<"Coeff_ErrVhall1: "<<CALC.Coeff_ErrVhall1<<endl;
	//cout<<"Coeff_ErrVhall2: "<<CALC.Coeff_ErrVhall2<<endl<<endl;

	CALC.RampTracking_Init(40.0, 0.0, 0, 200, 0);

	CALC.Estimation_Init( WTR );

	CALC.Tracking_Simu_WithEsti( THEO, CONST_KF );

	char fname_TrapRst [200];
	sprintf( fname_TrapRst,"Trapping Simu at(%4.2f,%4.2f,%4.2f)um with PID gain(%3.1f,%3.1f,%3.1f, %3.1f,%3.1f,%3.1f, %3.1f,%3.1f,%3.1f).txt",
		CALC.Trap_Target_umOm[X], CALC.Trap_Target_umOm[Y], CALC.Trap_Target_umOm[Z],
		CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z],
		CALC.Igain[X],CALC.Igain[Y],CALC.Igain[Z],
		CALC.Dgain[X],CALC.Dgain[Y],CALC.Dgain[Z] );
	sprintf( fname_TrapRst,"Tracking Simu with PID gain(%3.1f,%3.1f,%3.1f) (7-3-2014) NoDistRej.txt", CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z]);
	CALC.Write_SimuRst_Target_Meas_Real_Curr_Force(fname_TrapRst);

	char fname_EstiRst_x[200], 
		 fname_EstiRst_y[200], 
		 fname_EstiRst_z[200];
	sprintf( fname_EstiRst_x, "CONST_KF AR2 WTR Esti Rst X From C++ (InWater 1612Hz) PID gain(%3.1f,%3.1f,%3.1f) (7-3-2014) Tracking NoDistRej.txt", CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z] );
	sprintf( fname_EstiRst_y, "CONST_KF AR2 WTR Esti Rst Y From C++ (InWater 1612Hz) PID gain(%3.1f,%3.1f,%3.1f) (7-3-2014) Tracking NoDistRej.txt", CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z] );
	sprintf( fname_EstiRst_z, "CONST_KF AR2 WTR Esti Rst Z From C++ (InWater 1612Hz) PID gain(%3.1f,%3.1f,%3.1f) (7-3-2014) Tracking NoDistRej.txt", CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z] );
	CALC.Write_EstiRst_xyz( fname_EstiRst_x, fname_EstiRst_y, fname_EstiRst_z );*/
	//#################################################
    //#### (end) Positioning & Const Kalman Filter ####
	//#################################################



	//#########################################
    //#### Tracking & Adapt Kalman Filter: ####
	//#########################################
	//CALC.Set_PIDgain( 40.0,40.0,40.0,  0.0,0.0,0.0,  0.0,0.0,0.0 );
	//CALC.Set_PIDgain_Vhall(10.0, 100, 0.0);
	//CALC.Calc_Ctrl_Coeff_Force();
	//CALC.Calc_Ctrl_Coeff_Vhall();

	//cout<<"Coeff_ErrVhall:  "<<CALC.Coeff_ErrVhall <<endl;
	//cout<<"Coeff_ErrVhall1: "<<CALC.Coeff_ErrVhall1<<endl;
	//cout<<"Coeff_ErrVhall2: "<<CALC.Coeff_ErrVhall2<<endl<<endl;

	//CALC.RampTracking_Init(80.0, 0.0, 0, 100, 0);

	//CALC.Estimation_Init( WTR );

	//CALC.Tracking_Simu_WithEsti( THEO, ADAPT_KF );

	//char fname_TrapRst [200];
	////sprintf( fname_TrapRst,"Trapping Simu at(%4.2f,%4.2f,%4.2f)um with PID gain(%3.1f,%3.1f,%3.1f, %3.1f,%3.1f,%3.1f, %3.1f,%3.1f,%3.1f).txt",
	////	CALC.Trap_Target_umOm[X], CALC.Trap_Target_umOm[Y], CALC.Trap_Target_umOm[Z],
	////	CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z],
	////	CALC.Igain[X],CALC.Igain[Y],CALC.Igain[Z],
	////	CALC.Dgain[X],CALC.Dgain[Y],CALC.Dgain[Z] );
	//sprintf( fname_TrapRst,"Tracking Simu with PID gain(%3.1f,%3.1f,%3.1f) (7-3-2014) NoDistRej.txt", CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z]);
	//CALC.Write_SimuRst_Target_Meas_Real_Curr_Force(fname_TrapRst);

	//char fname_EstiRst_x[200], 
	//	 fname_EstiRst_y[200], 
	//	 fname_EstiRst_z[200];
	//sprintf( fname_EstiRst_x, "ADAPT_KF AR2 WTR Esti Rst X From C++ (InWater 1612Hz) PID gain(%3.1f,%3.1f,%3.1f) (7-3-2014) Tracking NoDistRej.txt", CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z] );
	//sprintf( fname_EstiRst_y, "ADAPT_KF AR2 WTR Esti Rst Y From C++ (InWater 1612Hz) PID gain(%3.1f,%3.1f,%3.1f) (7-3-2014) Tracking NoDistRej.txt", CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z] );
	//sprintf( fname_EstiRst_z, "ADAPT_KF AR2 WTR Esti Rst Z From C++ (InWater 1612Hz) PID gain(%3.1f,%3.1f,%3.1f) (7-3-2014) Tracking NoDistRej.txt", CALC.Pgain[X],CALC.Pgain[Y],CALC.Pgain[Z] );
	//CALC.Write_EstiRst_xyz( fname_EstiRst_x, fname_EstiRst_y, fname_EstiRst_z );
	//#################################################
    //#### (end) Positioning & Adapt Kalman Filter ####
	//#################################################


	system("pause");
	return 0;
}